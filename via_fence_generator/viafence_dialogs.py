#!/usr/bin/env python
"""
Dialogs for the Via Fence plugin
"""

import os
import sys
import wx
from .viafence_basedialogs import MainDialogBase


class MainDialog(MainDialogBase):
    """
    Extends the base dialog class to implement method needed. Base class is generated through
    wxFormBuilder and cannot be modified by the user (or better, it can, but the modification will
    be lost on every edit)
    """

    def __init__(self, parent):
        """
        Constructor
        """
        MainDialogBase.__init__(self, parent)
        # Small workaround to fix the paths generated by wxFormBuilder
        self.bmpViafence.SetBitmap(wx.Bitmap(
            os.path.join(os.path.dirname(os.path.realpath(__file__)), "resources", "viafence.png")))

    def OnInitDialog(self, event):
        """
        After initialization do some layout stuff
        """
        self.Layout()
        self.GetSizer().Fit(self)
        self.SetMinSize(self.GetSize())
        #self.SetMaxSize(self.GetSize())
        self.SetTitle("Via Fence Generator")
        if sys.version_info[0] == 2:
            self.chkDebugDump.SetToolTipString( "Creates a json file in the same directory as the "
                                                "opened board file containing the tracks and "
                                                "settings" )
        else:
            self.chkDebugDump.SetToolTip( "Creates a json file in the same directory as the opened"
                                          " board file containing the tracks and settings" )

    def OnNetFilterCheckBox(self, event):
        """
        On check state changed on the chkDebugDumb checkbox
        """
        self.txtNetFilter.Enable(event.IsChecked())

    def OnLayerCheckBox(self, event):
        """
        On check state changed on the LayerCheckbox
        """
        self.lstLayer.Enable(event.IsChecked())

    def OnFrequencyChanged(self, event):
        """
        On frequency value change calculate the lambda value (C / f) takeing in account the units
        (MHz for Frequency, mm for lambda)
        """
        try:
            frequency = float(self.txtFrequency.Value) * 1E6
        except ValueError:
            return

        self.txtLamda.Value = f'{(299_792_458 / frequency) * 1E3:.2f}'

    def OnLambdaChanged(self, event):
        """
        On lambda change calculate the suggested vias pitch. Rule of thumb is lambda / 20, ref to
        https://en.wikipedia.org/wiki/Via_fence.
        If the chkUpdateViaSettings checkbox is checked update also the vias settings.
        Here units are already correct so no scaling is needed.
        """
        try:
            wavelength = float(self.txtLamda.Value)
        except ValueError:
            return
        self.txtSuggestedSpacing.LabelText = f'{wavelength / 20:.2f}'

        if self.chkUpdateViaSettings.Value:
            self.txtViaPitch.Value = f'{wavelength / 20:.2f}'
